In the **Application Containers** pane, you enable microservice frameworks, private Docker registries, and other services that support your apps at the container level.

To configure the **Application Containers** pane:

1. Select **Application Containers**.

1. The **Enable Custom Buildpacks** checkbox governs the ability to pass a custom buildpack URL to the `-b` option of the `cf push` command. By default, this ability is enabled, letting developers use custom buildpacks when deploying apps. Disable this option by disabling the checkbox. For more information about custom buildpacks, see [Buildpacks](../buildpacks/).

1. The **Allow SSH access to app containers** checkbox controls SSH access to app instances. Enable the checkbox to permit SSH access across your deployment, and disable it to prevent all SSH access. For more information about SSH access permissions at the space and app scope, see [App SSH Overview](../devguide/deploy-apps/app-ssh-overview.html).

1. If you want to enable SSH access for new apps by default in spaces that allow SSH, select the **Enable SSH when an app is created** checkbox. If you disable the checkbox, developers can still enable SSH after pushing their apps by running `cf enable-ssh APP-NAME`.

1. Choose the method the Gorouter uses to verify app identity under **Router application identity verification**. To enable the Gorouter to verify app identity using TLS, select **Router uses TLS to verify application identity**. To enable the Gorouter and your apps to verify each other's identity using TLS, select **Router and apps use mutual TLS to verify each other's identity**.
    <p class='note'><strong>Note:</strong> Mutual TLS (mTLS) app identity verification does not work for Windows containers.</p>
    Verifying app identity using TLS or mTLS enables encryption between router and app containers and guards against misrouting during control plane failures. For more information about Gorouter route consistency modes, see the [Preventing Misrouting](../concepts/http-routing.html#consistency) section in the _HTTP Routing_ topic.
    <p class='note'><strong>Note:</strong> To support mTLS app identity verification, you need v2.3 or later of both PAS and PCF Isolation Segment (IST). The Gorouter and Diego Cell components in PCF v2.2 and earlier do not support mTLS handshakes.</p>
    <p class='note'><strong>Note:</strong> This feature does not work if the <strong>Disable SSL certificate verification for this environment</strong> checkbox is enabled in the <strong>Networking</strong> pane.</p>

1. To enable time-to-live (TTL) expiration for routes, select the **Prune Routes on TTL Expiry for TLS Backends** checkbox. You should only enable TTL expiration for TLS back ends if you are experiencing occasional misrouting of apps due to stale routes. For more information, see the [Preventing Misrouting](../concepts/http-routing.html#consistency) section in the _HTTP Routing_ topic and [Intermittent Misrouting of Apps in Large PCF Foundations](https://docs.pivotal.io/pivotalcf/2-5/pcf-release-notes/runtime-rn.html##stale-routes) in the _Pivotal Application Service v2.5 Release Notes_.

1. You can configure PAS to run app instances in Docker containers by providing a comma-separated list of their IP address ranges in the **Private Docker Insecure Registry Whitelist** textbox. For more information, see [Using Docker Registries](../opsguide/docker-registry.html).

1. Select your preference for **Docker Images Disk-Cleanup Scheduling on Cell VMs**. If you choose **Clean up disk-space once usage fills disk**, enter a value in MB for **Reserved amount of disk space for other jobs**. For more information about the configuration options and how to configure a reserved amount, see [Configuring Cell Disk Cleanup Scheduling](../opsguide/config-cell-cleanup.html).

1. Enter a number in the **Max Inflight Container Starts** field. This number configures the maximum number of started instances across the Diego cells in your deployment. Entering `0` sets no limit. For more information, see the [Setting a Maximum Number of Started Containers](../upgrading/configuring.html#container-starts) section of the _Configuring PAS for Upgrades_ topic.

1. Under **Enabling NFSv3 volume services**, select **Enable** or **Disable**. NFS volume services allow app developers to bind existing NFS volumes to their apps for shared file access. For more information, see [Enabling Volume Services](../opsguide/enable-vol-services.html).
	<p class="note"><strong>Note:</strong> In a fresh install, NFSv3 volume services is enabled by default. In an upgrade, NFSv3 volume services is set to the same setting as it was in the previous deployment.</p>

1. (Optional) To configure LDAP for NFSv3 volume services:
  * For **LDAP Service Account User**, enter the username of the service account in LDAP that will manage volume services.
  * For **LDAP Service Account Password**, enter the password for the service account.
  * For **LDAP Server Host**, enter the hostname or IP address of the LDAP server.
  * For **LDAP Server Port**, enter the LDAP server port number. If you do not specify a port number, Ops Manager uses 389.
  * For **LDAP User Search Base**, enter the location in the LDAP directory tree from which any LDAP User search begins. The typical LDAP Search Base matches your domain name. <br>For example, a domain named `cloud.example.com` typically uses the following LDAP User Search Base: `ou=Users,dc=example,dc=com`.
  * For **LDAP Server CA Cert**, you can optionally enter a certificate if your LDAP server supports TLS and you want to enable TLS connections from the NFS driver to your LDAP server. Paste in the root certificate from your CA certificate or your self-signed certificate.
  <p class='note'><strong>Note:</strong> UAA can only parse one certificate entered into this field. If you enter multiple certificates, UAA only uses the first one you entered and ignores the rest. You only need to include one root certificate or self-signed certificate.</p>

1. Select the **Format of timestamps in Diego logs**, either **RFC3339 timestamps** or **Seconds since the Unix epoch**.

1. (Optional) Modify the **Default health check timeout**. The value configured for this field is the amount of time allowed to elapse between starting up an app and the first healthy response from the app. If the health check does not receive a healthy response within the configured timeout, then the app is declared unhealthy. The default timeout is `60` seconds and the maximum configurable timeout is `600` seconds.
    <p class='note warning'><strong>Warning:</strong> If you decrease the default health check timeout value below its current value, existing apps with startup times greater than the new value may fail to start up.</p>

1. Click **Save**.

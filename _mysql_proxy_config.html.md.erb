<p class="note"><strong>Note:</strong> You only need to configure this section if you have selected one of the <strong>Internal Databases - MySQL</strong> options in the <strong>Databases</strong> section.</p>

1. Select **Internal MySQL**.

1. In the **Replication canary time period** field, leave the default of 30 seconds or modify the value based on the needs of your deployment. Lower numbers cause the canary to run more frequently, which means that the canary reacts more quickly to replication failure but adds load to the database.

1. In the **Replication canary read delay** field, leave the default of 20 seconds or modify the value based on the needs of your deployment. This field configures how long the canary waits, in seconds, before verifying that data is replicating across each MySQL node. Clusters under heavy load can experience a small replication lag as write-sets are committed across the nodes.

1. (**Required**): In the **E-mail address** field, enter the email address where the MySQL service sends alerts when the cluster experiences a replication issue or when a node is not allowed to auto-rejoin the cluster.

1. To prohibit the creation of command line history files on the MySQL nodes, disable the **Allow Command History** checkbox.

1. To allow the admin and roadmin to connect from any remote host, enable the **Allow Remote Admin Access** checkbox. When the checkbox is disabled, admins must `bosh ssh` into each MySQL VM to connect as the MySQL super user.
	<p class="note"><strong>Note:</strong> Network configuration and Application Security Groups restrictions may still limit a clientâ€™s ability to establish a connection with the databases.</p>

1. For **Cluster Probe Timeout**, enter the maximum amount of time, in seconds, that a new node will search for existing cluster nodes. If left blank, the default value is 10 seconds.

1. For **Max Connections**, enter the maximum number of connections allowed to the database.
If left blank, the default value is 1500.

1. If you want to log audit events for internal MySQL, select **Enable server activity logging** under **Server Activity Logging**.
	1. For the **Event types** field, you can enter the events you want the MySQL service to log. By default, this field includes `connect` and `query`, which tracks who connects to the system and what queries are processed.

1. Enter values for the following fields:
	* **Load Balancer Healthy Threshold**: Specifies the amount of time, in seconds, to wait until declaring the MySQL Proxy instance started. This allows an external load balancer time to register the instance as healthy.
	* **Load Balancer Unhealthy Threshold**: Specifies the amount of time, in seconds, that the MySQL Proxy continues to accept connections before shutting down. During this period, the Healthcheck reports as unhealthy to cause load balancers to fail over to other proxies. You must enter a value greater than or equal to the maximum time it takes your load balancer to consider a proxy instance unhealthy, given repeated failed healthchecks.

1. If you want to enable MySQL proxies to listen on port 3336, select the
**Enable inactive mysql port** checkbox. When you run MySQL in high availability mode, this feature allows you to connect to a MySQL node that is not currently serving traffic so that you can run auditing and reporting queries without affecting performance.

1. If you want to enable the MySQL Interruptor feature, select the checkbox to **Prevent node auto re-join**. This feature stops all writes to the MySQL database if it notices an inconsistency in the dataset between the nodes. For more information, see the [Interruptor](http://docs.pivotal.io/p-mysql/1-10/troubleshooting.html#interruptor) section in the MySQL for PCF documentation.

1. Click **Save**.

For more information on how to monitor the node health of your MySQL Proxy instances, see [Using the MySQL Proxy](../mysql/mysql-proxy-pas.html).
